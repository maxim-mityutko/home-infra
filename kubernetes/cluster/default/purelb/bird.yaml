# Ref: https://gitlab.com/purelb/bird_router/-/blob/main/bird.yml-SAMPLE?ref_type=heads
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bird
  namespace: purelb-system
  labels:
    app.kubernetes.io/name: bird
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bird
  strategy:
    type: Recreate
  revisionHistoryLimit: 1
  template:
    metadata:
      namespace: purelb-system
      labels:
        app.kubernetes.io/name: bird
    spec:
      restartPolicy: Always
      containers:
        - name: bird
          # Ref: https://gitlab.com/purelb/bird_router/container_registry/1323381
          image: registry.gitlab.com/purelb/bird_router:v2.16.1-purelb0
          resources:
            requests:
              memory: 200M
              cpu: 50m
            limits:
              memory: 500M
              cpu: 250m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: false
          volumeMounts:
          - name: bird
            mountPath: /usr/local/etc
      volumes:
      - name: bird
        configMap:
          name: bird
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      hostNetwork: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
---
# Ref: https://gitlab.com/purelb/bird_router/-/blob/main/bird-cm.yml?ref_type=heads
apiVersion: v1
kind: ConfigMap
metadata:
  name: bird
  namespace: purelb-system
data:
  bird.conf: |-
    # Configure logging
    log stderr all;
    #log "/var/log/bird.log" { debug, trace, info, remote, warning, error, auth, fatal, bug };

    # birdvars is created by docker_entrypoint.  It reads env variables for use in configuration
    include "/usr/local/include/birdvars.conf";

    # Router ID set using birdvars
    router id k8sipaddr;

    watchdog warning 5 s;
    watchdog timeout 30 s;

    # The Device protocol is required, it provide a mechanism for getting 
    # information from the Linux kernel
    protocol device { 
      scan time 10; 
    }

    # The direct protocol is used to import the routes added by PureLb to kube-lb0
    protocol direct {
      ipv4;
      ipv6;
      interface "kube-lb0";
    }

    # The kernel protocol is used to learn and import kernel routes. 
    # These are needed to establish connectivity on the local network
    # Note that no routes from Birds are exported to the kernel, export defaults to false.
    protocol kernel {
      ipv4;
      scan time 10;			
      learn;		
    }

    protocol kernel {
      ipv6;
      scan time 10;
      learn;
    }

    # OSPF example
    protocol ospf v2  {
      ipv4 {
        import none;
        export where source ~ [ RTS_STATIC, RTS_DEVICE ];
      };
      area 0.0.0.0 {
        interface "ens18.1" {
          type broadcast;         # Detected by default
            cost 10;                # Interface metric
        };
      };
    }

    #protocol ospf v3 {
    #  ipv6 {
    #    import none;
    #    export where source = RTS_STATIC;
    #  };
    #  area 0 {
    #    interface "e*" {
    #      type broadcast;		# Detected by default
    #      cost 10;		# Interface metric
    #    };
    #  };
    #}



