# ================================================================================================
# Open WebUI - User-friendly AI Interface
#
# Documentation: https://docs.openwebui.com
# Helm Chart: https://github.com/open-webui/helm-charts/blob/open-webui-8.12.2/charts/open-webui/README.md
# Repository: https://github.com/open-webui/open-webui
#
# Useful articles:
#   - Integration with "continue.dev": https://docs.openwebui.com/tutorials/integrations/continue-dev
#
# Open WebUI is a user-friendly AI interface that supports multiple backends
# including Ollama, OpenAI API, and others. This Kustomization deploys
# the Open WebUI application in the machine-learning namespace using the
# official Helm chart.
# ================================================================================================
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
namespace: machine-learning
resources:
  - dns-endpoint.yaml
  - open-webui.yaml
  - secret.yaml
helmCharts:
  - name: open-webui
    namespace: machine-learning
    releaseName: open-webui
    version: 8.12.2
    repo: https://helm.openwebui.com/
    valuesInline:
      ollama:
        enabled: false
      pipelines:
        enabled: false
      tika:
        enabled: false
      extraEnvFrom:
        - configMapRef:
            name: open-webui
        - secretRef:
            name: open-webui
      websocket:
        enabled: false
      redis-cluster:
        enabled: false
      image:
        repository: ghcr.io/open-webui/open-webui
      ingress:
        enabled: true
        class: public
        annotations:
          kubernetes.io/ingress.class: public
          cert-manager.io/cluster-issuer: lets-encrypt
        host: oi.brhd.io
      persistence:
        enabled: false
      serviceAccount:
        enable: true
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 60
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
      readinessProbe:
        initialDelaySeconds: 30
        periodSeconds: 30
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
      resources:
        requests:
          cpu: 250m
          memory: 500Mi
        limits:
          memory: 4Gi
      podSecurityContext: {}
      revisionHistoryLimit: 3
      strategy: 
        type: Recreate
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values: ["amd64"]
                  - key: node.kubernetes.io/microk8s-worker
                    operator: Exists
